export function createResponseWrapper(response){let sent=!1;const enhancedResponse={...response,status(code){if(sent)throw new Error("Cannot set status after response has been sent");return response.statusCode=code,enhancedResponse},set(field,value){if(sent)throw new Error("Cannot set headers after response has been sent");return"object"==typeof field?Object.entries(field).forEach(([key,val])=>{response.setHeader(key,val)}):response.setHeader(field,value),enhancedResponse},get:field=>response.getHeader(field),type(contentType){if(sent)throw new Error("Cannot set content type after response has been sent");const mimeType={html:"text/html",json:"application/json",xml:"application/xml",text:"text/plain",css:"text/css",js:"application/javascript"}[contentType]||contentType;return response.setHeader("Content-Type",mimeType),enhancedResponse},json(obj){if(sent)throw new Error("Cannot send response after it has already been sent");sent=!0,response.setHeader("Content-Type","application/json");try{const jsonString=JSON.stringify(obj);response.end(jsonString)}catch(error){throw new Error("Failed to stringify object to JSON")}return enhancedResponse},send(data){if(sent)throw new Error("Cannot send response after it has already been sent");return sent=!0,null==data?(response.end(),enhancedResponse):("object"==typeof data?(response.setHeader("Content-Type","application/json"),response.end(JSON.stringify(data))):"string"==typeof data?(response.getHeader("Content-Type")||response.setHeader("Content-Type","text/html"),response.end(data)):Buffer.isBuffer(data)?response.end(data):(response.getHeader("Content-Type")||response.setHeader("Content-Type","text/plain"),response.end(String(data))),enhancedResponse)},html(htmlString){if(sent)throw new Error("Cannot send response after it has already been sent");return sent=!0,response.setHeader("Content-Type","text/html"),response.end(htmlString),enhancedResponse},text(textString){if(sent)throw new Error("Cannot send response after it has already been sent");return sent=!0,response.setHeader("Content-Type","text/plain"),response.end(String(textString)),enhancedResponse},redirect(url,statusCode=302){if(sent)throw new Error("Cannot redirect after response has been sent");return sent=!0,response.statusCode=statusCode,response.setHeader("Location",url),response.end(),enhancedResponse},cookie(name,value,options={}){if(sent)throw new Error("Cannot set cookies after response has been sent");let cookieString=`${name}=${encodeURIComponent(value)}`;options.maxAge&&(cookieString+=`; Max-Age=${options.maxAge}`),options.domain&&(cookieString+=`; Domain=${options.domain}`),options.path&&(cookieString+=`; Path=${options.path}`),options.secure&&(cookieString+="; Secure"),options.httpOnly&&(cookieString+="; HttpOnly"),options.sameSite&&(cookieString+=`; SameSite=${options.sameSite}`);const existingCookies=response.getHeader("Set-Cookie")||[],cookies=Array.isArray(existingCookies)?existingCookies:[existingCookies];return cookies.push(cookieString),response.setHeader("Set-Cookie",cookies),enhancedResponse},clearCookie(name,options={}){return this.cookie(name,"",{...options,maxAge:0})}};return enhancedResponse}export default createResponseWrapper;