import{readdir,stat}from"fs/promises";import path from"path";export default async(root,config,log)=>{log(`Starting directory scan from: ${root}`,2);const paths=[],isDisallowed=filePath=>{const relativePath=path.relative(root,filePath).replace(/\\/g,"/"),urlPath="/"+relativePath,disallowed=config.disallowedRegex.some(pattern=>{const regex=new RegExp(pattern);return regex.test(urlPath)||regex.test(relativePath)});return disallowed&&log(`Skipping disallowed file: ${relativePath}`,4),disallowed},isAllowedMimeType=filePath=>{const ext=(filePath=>{const ext=path.extname(filePath).toLowerCase();return ext.startsWith(".")?ext.slice(1):ext})(filePath),allowed=config.allowedMimes.hasOwnProperty(ext);return allowed||log(`Skipping file with disallowed extension: ${path.relative(root,filePath)} (.${ext})`,4),allowed},scanDirectory=async currentPath=>{try{const entries=await readdir(currentPath);log(`Scanning directory: ${path.relative(root,currentPath)} (${entries.length} entries)`,3);for(const entry of entries){const fullPath=path.join(currentPath,entry),stats=await stat(fullPath);stats.isDirectory()?await scanDirectory(fullPath):stats.isFile()&&isAllowedMimeType(fullPath)&&!isDisallowed(fullPath)&&(paths.push(fullPath),log(`Added file: ${path.relative(root,fullPath)}`,4))}}catch(error){log(`Could not access directory: ${currentPath} - ${error.message}`,1)}};return await scanDirectory(root),log(`Directory scan complete. Found ${paths.length} files`,2),paths};