import zlib from"zlib";export const corsMiddleware=config=>async(req,res,next)=>{const origin=req.headers.origin,allowedOrigins=Array.isArray(config.origin)?config.origin:[config.origin];if(("*"===config.origin||allowedOrigins.includes(origin))&&res.setHeader("Access-Control-Allow-Origin",origin||"*"),res.setHeader("Access-Control-Allow-Methods",config.methods.join(", ")),res.setHeader("Access-Control-Allow-Headers",config.headers.join(", ")),"OPTIONS"===req.method)return res.writeHead(200),void res.end();await next()};export const compressionMiddleware=config=>async(req,res,next)=>{if(!(req.headers["accept-encoding"]||"").includes("gzip"))return await next();const originalEnd=res.end,chunks=(res.write,[]);res.write=function(chunk){return chunk&&chunks.push(Buffer.from(chunk)),!0},res.end=function(chunk){chunk&&chunks.push(Buffer.from(chunk));const buffer=Buffer.concat(chunks);buffer.length>=config.threshold?zlib.gzip(buffer,(err,compressed)=>{!err&&compressed.length<buffer.length?(res.setHeader("Content-Encoding","gzip"),res.setHeader("Content-Length",compressed.length),originalEnd.call(res,compressed)):originalEnd.call(res,buffer)}):originalEnd.call(res,buffer)},await next()};export const rateLimitMiddleware=config=>{const requestCounts=new Map;return async(req,res,next)=>{const clientId=req.socket.remoteAddress,now=Date.now(),windowStart=now-config.windowMs;requestCounts.has(clientId)||requestCounts.set(clientId,[]);const recentRequests=requestCounts.get(clientId).filter(time=>time>windowStart);if(recentRequests.length>=config.maxRequests)return res.writeHead(429,{"Content-Type":"text/plain"}),void res.end(config.message);recentRequests.push(now),requestCounts.set(clientId,recentRequests),await next()}};export const securityMiddleware=config=>async(req,res,next)=>{for(const[header,value]of Object.entries(config.headers))res.setHeader(header,value);await next()};export const loggingMiddleware=(config,log)=>async(req,res,next)=>{const startTime=Date.now(),userAgent=config.includeUserAgent?req.headers["user-agent"]:"",originalEnd=res.end;res.end=function(...args){const responseTime=Date.now()-startTime;let logMessage=`${req.method} ${req.url}`;config.includeResponseTime&&(logMessage+=` - ${responseTime}ms`),config.includeUserAgent&&userAgent&&(logMessage+=` - ${userAgent}`),log(logMessage,1),originalEnd.apply(res,args)},await next()};