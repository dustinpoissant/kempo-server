import{URL}from"url";export function createRequestWrapper(request,params={}){const url=new URL(request.url,`http://${request.headers.host||"localhost"}`),query=Object.fromEntries(url.searchParams);return{...request,method:request.method,url:request.url,headers:request.headers,params:params,query:query,path:url.pathname,body:async()=>new Promise((resolve,reject)=>{let body="";request.on("data",chunk=>{body+=chunk.toString()}),request.on("end",()=>{resolve(body)}),request.on("error",reject)}),async json(){try{const body=await this.body();return JSON.parse(body)}catch(error){throw new Error("Invalid JSON in request body")}},async text(){return this.body()},buffer:async()=>new Promise((resolve,reject)=>{const chunks=[];request.on("data",chunk=>{chunks.push(chunk)}),request.on("end",()=>{resolve(Buffer.concat(chunks))}),request.on("error",reject)}),get:headerName=>request.headers[headerName.toLowerCase()],is(type){return(this.get("content-type")||"").includes(type)}}}export default createRequestWrapper;