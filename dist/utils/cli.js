import{spawn}from"child_process";import readline from"readline";export const getArgs=(mapping={},argv=process.argv)=>{const args={};let currentName="",values=[];const save=()=>{if(currentName)if(0===values.length)args[currentName]=!0;else if(1===values.length){const val=values[0];args[currentName]="false"!==val&&("true"===val||val)}else args[currentName]=values};for(let i=2;i<argv.length;i++){const arg=argv[i];if(arg.startsWith("-")){let name;if(save(),name=arg.startsWith("--")?arg.slice(2):arg.slice(1),name.includes("=")){const[key,...valParts]=name.split("=");name=key,values=[valParts.join("=")]}else values=[];mapping[name]&&(name=mapping[name]),currentName=name}else values.push(arg)}return save(),args};export const runChildProcess=command=>new Promise((resolve,reject)=>{const[cmd,...args]=command.split(" "),child=spawn(cmd,args,{stdio:"inherit",shell:!0});child.on("close",code=>{0===code?resolve(`child process exited with code ${code}`):reject(new Error(`child process exited with code ${code}`))}),child.on("error",reject)});export const runChildNodeProcess=(scriptPath,argsObj={})=>{const command=`node ${scriptPath} ${Object.entries(argsObj).flatMap(([key,value])=>!0===value?[`--${key}`]:[`--${key}`,value]).join(" ")}`;return runChildProcess(command)};export const runChildNodeProcessScript=scriptPath=>{const child=spawn("node",[scriptPath],{stdio:"inherit",shell:!0});return new Promise((resolve,reject)=>{child.on("close",code=>{0===code?resolve():reject(new Error(`Process exited with code ${code}`))}),child.on("error",reject)})};export const promptUser=query=>{const rl=readline.createInterface({input:process.stdin,output:process.stdout});return new Promise(resolve=>{rl.question(`${query}: `,answer=>{rl.close(),resolve(answer)})})};export const promptYN=(query,defaultValue="y")=>promptUser(`${query} (${"y"===defaultValue?"Y/n":"y/N"}): `).then(answer=>{const normalizedAnswer=answer.trim().toLowerCase();return""===normalizedAnswer?"y"===defaultValue:"y"===normalizedAnswer});